%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - skon
scope: source.skon
contexts:
  main:
    - include: key
    - include: value
    - match: \[
      push: brackets
    - match: \]
      scope: invalid.illegal.stray-bracket-end
    - match: \{
      push: brackets
    - match: \}
      scope: invalid.illegal.stray-bracket-end
  brackets:
    - match: \]
      pop: true
    - include: main
  curlies:
    - match: \}
      pop: true
    - include: main
  key:
    - match: '(\w+)(\:)'
      captures:
        0: punctuation.separator.dictionary.key-value.skon
        1: punctuation.separator.dictionary.key.end.skon
      pop: true
  array:
    - match: '\['
      comment: a SKON array
      captures:
        0: punctuation.definition.array.begin.skon
      push:
        - meta_scope: meta.structure.array.skon
        - match: '\]'
          captures:
            0: punctuation.definition.array.end.skon
          pop: true
        - match: '\,'
          captures:
            0: punctuation.definition.array.separator.skon
        - include: value
        - include: comments
        - match: '[^\s,]'
          scope: invalid.illegal.expected-array-separator.skon 
  comments:
    - match: /\*\*
      captures:
        0: punctuation.definition.comment.skon
      push:
        - meta_scope: comment.block.documentation.skon
        - match: \*/
          pop: true
    - match: /\*
      captures:
        0: punctuation.definition.comment.skon
      push:
        - meta_scope: comment.block.skon
        - match: \*/
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.skon
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.skon
  datetime:
    - match: '(\@(?:[1-9][0-9]*))|((?:[0-9]{4}\-[0-9]{2}\-[0-9]{2})(?:T[0-9]{2}\:[0-9]{2}\:[0-9]{2}(?:\.\d+)?(?:Z|(?:\+|\-)[0-9]{2}\:[0-9]{2}))?)|([0-9]{2}\:[0-9]{2}\:[0-9]{2}(?:\.\d+)?(?:Z|(?:\+|\-)[0-9]{2}\:[0-9]{2}))'
      comment: handles date-time values as specified by RFC 3339
      scope: constant.language.datetime.skon
  number:
    - match: |-
        (?x:         # turn on extended mode
          -?         # an optional minus
          (?:
            0        # a zero
            |        # ...or...
            [1-9]    # a 1-9 character
            \d*      # followed by zero or more digits
          )
          (?:
            (?:
              \.     # a period
              \d+    # followed by one or more digits
            )?
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
        )
      comment: handles integer and decimal numbers
      scope: constant.numeric.skon
  map:
    - match: '\{'
      comment: a SKON map
      captures:
        0: punctuation.definition.dictionary.begin.skon
      push:
        - meta_scope: meta.structure.dictionary.skon
        - match: '\}'
          captures:
            0: punctuation.definition.dictionary.end.skon
          pop: true
        - include: comments
        - match: '(\w+)(\:)'
          captures:
            0: punctuation.separator.dictionary.key-value.skon
            1: punctuation.separator.dictionary.key.end.skonkon
          push:
            - meta_scope: meta.structure.dictionary.value.skon
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.skon
              pop: true
            - include: value
            - match: '[^\s,]'
              scope: invalid.illegal.expected-dictionary-separator.skon
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-dictionary-separator.skon
  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.skon
      push:
        - meta_scope: string.quoted.double.skon
        - match: '"'
          captures:
            0: punctuation.definition.string.end.skon
          pop: true
        - match: |-
            (?x:                # turn on extended mode
              \\                # a literal backslash
              (?:               # ...followed by...
                ["\\/bfnrt]     # one of these characters
                |               # ...or...
                u               # a u
                [0-9a-fA-F]{4}  # and four hex digits
              )
            )
          scope: constant.character.escape.skon
        - match: \\.
          scope: invalid.illegal.unrecognized-string-escape.skon
  value:
    - include: constant
    - include: datetime
    - include: number
    - include: string
    - include: array
    - include: map
    - include: comments
...