~Version: 1~

// Schemas also have comments
/* Multilines too */
AnyString: string, // This requires any key-string pair with key "AnyString" and any string.

EnumString: string (in ["OPEN", "CLOSED", "BROKEN"]), // This string has only three valid values, "OPEN", "CLOSED" and "BROKEN".

String: string (match [".*"]), // String needs to match regex.
Integer: int (range [0, 10]), // Number needs to be in range, works on any number type (i.e. int and double).
Integer2: int (more than [4]), // Number needs to be more than.
Integer3: int (less than [7]), // Number needs to be less than.
Double: double (in range [0.123, 1.23]), // Double is a number type as such this works.
Boolean boolean, // Cannot be more specified
DateTime: dateTime (range [@2134, @23456]), // DateTimes can also be specified to be in a range
DateTime1: dateTime (before [@2016-04-22]) // The dateTime must be a date before the specified date
DateTime2: dateTime (after [@05:20:04]) // The dateTime must be a dateTime after the specified dateTime

// Here we define the map value Person, this definition can be used in a lot of different places.
def Person:
{
    FirstName: string (match ["[A-Za-z]+"]),
    LastName: string (match ["[A-Za-z]+"]),
    EMail: string (match ["[A-Za-z0-9_.]\\.[A-Za-z0-9.]"]),
}

// Every element is implicitly required if not otherwise stated
Map: 
{
    StringKey: string (match "A regex"),

    // This is an optional key-value.
    optional AnotherKey: int (in range [0, 10]),

    // Here we are using the Person def defined above.
    optional People: [ #Person ] (range [5, 10]), // This defines how many elements the array needs to have.
},